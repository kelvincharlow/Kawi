import{s as e,k as t,m as a,n as c,o as r,p as s,q as n,r as i,t as o,u}from"./index-6a75618c.js";const h=new class{useMockData=!1;connectionAttempted=!1;dbConnectionStatus=!1;cache=new Map;CACHE_TTL={vehicles:3e5,drivers:3e5,fuelRecords:12e4,maintenanceRecords:12e4,workTickets:3e4,dashboardStats:6e4};constructor(){this.useMockData=!1,this.initializeConnection()}getCacheKey(e,t){return t?`${e}_${JSON.stringify(t)}`:e}getFromCache(e){const t=this.cache.get(e);if(!t)return null;return Date.now()-t.timestamp>t.ttl?(this.cache.delete(e),null):t.data}setCache(e,t,a){this.cache.set(e,{data:t,timestamp:Date.now(),ttl:a})}clearCache(e){e?this.cache.delete(e):this.cache.clear()}async initializeConnection(){e()?this.useMockData=!0:(this.dbConnectionStatus=await t(),this.connectionAttempted=!0,this.dbConnectionStatus?this.useMockData=!1:this.useMockData=!0)}async getVehicles(){const e=this.getCacheKey("getVehicles"),t=this.getFromCache(e);if(t)return t;if(this.useMockData)return this.setCache(e,a,this.CACHE_TTL.vehicles),a;try{const{data:t,error:r}=await c.from("vehicles").select("*").order("created_at",{ascending:!1});if(r)throw r;const s=t||a;return this.setCache(e,s,this.CACHE_TTL.vehicles),s}catch(r){return this.setCache(e,a,this.CACHE_TTL.vehicles),a}}async createVehicle(e){if(this.useMockData){const t={id:`vehicle-${Date.now()}`,...e,createdAt:(new Date).toISOString(),updatedAt:(new Date).toISOString()};return a.push(t),r.saveVehicles(a),this.cache.delete(this.getCacheKey("getVehicles")),{success:!0,vehicle:t}}try{const{data:t,error:a}=await c.from("vehicles").insert(e).select().single();if(a)throw a;return this.cache.delete(this.getCacheKey("getVehicles")),{success:!0,data:t}}catch(t){return this.cache.delete(this.getCacheKey("getVehicles")),{success:!0,data:{id:`vehicle-${Date.now()}`,...e,created_at:(new Date).toISOString(),updated_at:(new Date).toISOString()}}}}async getDrivers(){const e=this.getCacheKey("getDrivers"),t=this.getFromCache(e);if(t)return t;if(this.useMockData)return this.setCache(e,s,this.CACHE_TTL.drivers),s;try{const{data:t,error:a}=await c.from("drivers").select("*").order("created_at",{ascending:!1});if(a)throw a;const r=t||s;return this.setCache(e,r,this.CACHE_TTL.drivers),r}catch(a){return this.setCache(e,s,this.CACHE_TTL.drivers),s}}async createDriver(e){if(this.useMockData){const t={id:`driver-${Date.now()}`,...e,createdAt:(new Date).toISOString(),updatedAt:(new Date).toISOString()};return s.push(t),r.saveDrivers(s),{success:!0,driver:t}}try{const{data:t,error:a}=await c.from("drivers").insert(e).select().single();if(a)throw a;return this.cache.delete(this.getCacheKey("getDrivers")),{success:!0,data:t}}catch(t){return this.cache.delete(this.getCacheKey("getDrivers")),{success:!0,data:{id:`driver-${Date.now()}`,...e,created_at:(new Date).toISOString(),updated_at:(new Date).toISOString()}}}}async getFuelRecords(){if(this.useMockData)return n;try{const{data:e,error:t}=await c.from("fuel_records").select("*").order("date",{ascending:!1});if(t)throw t;return e||n}catch(e){return n}}async createFuelRecord(e){if(this.useMockData){const t={id:`fuel-${Date.now()}`,...e,createdAt:(new Date).toISOString(),updatedAt:(new Date).toISOString()};return n.push(t),r.saveFuelRecords(n),{success:!0,record:t}}try{const{data:t,error:a}=await c.from("fuel_records").insert(e).select().single();if(a)throw a;return t}catch(t){return{success:!0}}}async getBulkAccounts(){const e="bulkAccounts",t=this.getFromCache(e);if(t)return t;if(this.useMockData){const t=[{id:"bulk-1",account_name:"Shell Fleet Account",supplier_name:"Shell",account_number:"SFL-2024-001",current_balance:5e3,initial_balance:1e4,credit_limit:15e3,status:"active",contact_person:"John Manager",contact_phone:"+1234567890",contact_email:"fleet@shell.com",created_at:(new Date).toISOString(),updated_at:(new Date).toISOString()}];return this.setCache(e,t,this.CACHE_TTL.fuelRecords),t}try{const{data:t,error:a}=await c.from("bulk_fuel_accounts").select("*").order("created_at",{ascending:!1});if(a)throw a;return this.setCache(e,t||[],this.CACHE_TTL.fuelRecords),t||[]}catch(a){const t=[{id:"bulk-1",account_name:"Shell Fleet Account",supplier_name:"Shell Kenya",account_number:"SFL-2024-001",current_balance:15e3,initial_balance:2e4,credit_limit:25e3,status:"active",contact_person:"John Manager",contact_phone:"+254-700-123456",contact_email:"fleet@shell.co.ke",fuel_types:"petrol,diesel",created_at:(new Date).toISOString(),updated_at:(new Date).toISOString()},{id:"bulk-2",account_name:"Total Fleet Account",supplier_name:"Total Kenya",account_number:"TFL-2024-002",current_balance:8500,initial_balance:1e4,credit_limit:15e3,status:"active",contact_person:"Mary Supervisor",contact_phone:"+254-700-789012",contact_email:"fleet@total.co.ke",fuel_types:"petrol,diesel",created_at:(new Date).toISOString(),updated_at:(new Date).toISOString()}];return this.setCache(e,t,this.CACHE_TTL.fuelRecords),t}}async createBulkAccount(e){if(this.clearCache("bulkAccounts"),this.useMockData){return{success:!0,account:{id:`bulk-${Date.now()}`,...e,created_at:(new Date).toISOString(),updated_at:(new Date).toISOString()}}}try{const{data:t,error:a}=await c.from("bulk_fuel_accounts").insert(e).select().single();if(a)throw a;return{success:!0,data:t}}catch(t){return{success:!0,data:{id:`bulk-${Date.now()}`,...e,created_at:(new Date).toISOString(),updated_at:(new Date).toISOString()}}}}async deductFromBulkAccount(e,t){if(this.clearCache("bulkAccounts"),this.useMockData)return{success:!0,newBalance:4500};try{const{data:a,error:r}=await c.from("bulk_fuel_accounts").select("current_balance").eq("id",e).single();if(r)throw r;const s=a.current_balance-t,{data:n,error:i}=await c.from("bulk_fuel_accounts").update({current_balance:s,updated_at:(new Date).toISOString()}).eq("id",e).select().single();if(i)throw i;return{success:!0,newBalance:s,account:n}}catch(a){return{success:!0,newBalance:4500}}}async getWorkTickets(){if(this.useMockData)return i;try{const{data:e,error:t}=await c.from("work_tickets").select("*").order("created_at",{ascending:!1});if(t)throw t;return e||i}catch(e){return i}}async createWorkTicket(e){if(this.useMockData){const t={id:`ticket-${Date.now()}`,...e,createdAt:(new Date).toISOString(),updatedAt:(new Date).toISOString()};return i.push(t),r.saveWorkTickets(i),{success:!0,ticket:t}}try{const{data:t,error:a}=await c.from("work_tickets").insert(e).select().single();if(a)throw a;return t}catch(t){return{success:!0}}}async getMaintenanceRecords(){if(this.useMockData)return o;try{const{data:e,error:t}=await c.from("maintenance_records").select("*").order("date",{ascending:!1});if(t)throw t;return e||o}catch(e){return o}}async createMaintenanceRecord(e){if(this.useMockData){const t={id:`maint-${Date.now()}`,...e,createdAt:(new Date).toISOString(),updatedAt:(new Date).toISOString()};return o.push(t),r.saveMaintenanceRecords(o),{success:!0,record:t}}try{const{data:t,error:a}=await c.from("maintenance_records").insert(e).select().single();if(a)throw a;return t}catch(t){return{success:!0}}}async getDashboardStats(){if(this.useMockData)return u;try{const e=await this.getVehicles(),t=await this.getDrivers(),a=await this.getFuelRecords(),c=await this.getMaintenanceRecords(),r=await this.getWorkTickets();return{totalVehicles:e.length,totalDrivers:t.length,totalFuelRecords:a.length,totalMaintenanceRecords:c.length,totalWorkTickets:r.length,lastUpdated:(new Date).toISOString()}}catch(e){return u}}isUsingMockData(){return this.useMockData}setMockMode(e){this.useMockData=e}};export{h as a};
